<?php

namespace Orth\IndexBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\AdvancedUserInterface;
use Symfony\Component\Security\Core\Validator\Constraints as SecurityAssert;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Users
 */
class Users implements AdvancedUserInterface, \Serializable
{
    /**
     * @var integer
     */
    private $customerRef;

    /**
     * @var integer
     */
    private $firstName;

    /**
     * @var string
     */
    private $lastName;

    /**
     * @var integer
     */
    private $userGroup;

    /**
     * @var string
     */
    private $email;

    /**
     * @var string
     */
    private $passkey;

    /**
     * @var integer
     */
    private $id;
    
    /**
     * @var integer
     */
    private $active;
    
    /**
     * @var integer
     */
    private $permPrice;    
    
    /**
     * @var integer
     */
    private $permPriceopenshop;
    
    /**
     * @var integer
     */
    private $permOrder;
    
    /**
     * @var integer
     */
    private $permOpenshop;
    /**
     * Set customerRef
     *
     * @param integer $customerRef
     * @return Users
     */
    public function setCustomerRef($customerRef)
    {
        $this->customerRef = $customerRef;

        return $this;
    }

    /**
     * Get customerRef
     *
     * @return integer 
     */
    public function getCustomerRef()
    {
        return $this->customerRef;
    }

    /**
     * Set firstName
     *
     * @param string $firstName
     * @return Users
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName
     *
     * @return string 
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName
     *
     * @param string $lastName
     * @return Users
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName
     *
     * @return string 
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set userGroup
     *
     * @param integer $userGroup
     * @return Users
     */
    public function setUserGroup($userGroup)
    {
        $this->userGroup = $userGroup;

        return $this;
    }

    /**
     * Get userGroup
     *
     * @return integer 
     */
    public function getUserGroup()
    {
        return $this->userGroup;
    }

    /**
     * Get username
     *
     * @return string 
     */
    public function getUsername()
    {
        return $this->email;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return Users
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string 
     */
    public function getEmail()
    {
        return $this->email;
    }
    
    /**
     * Set passkey
     *
     * @param string $passkey
     * @return Users
     */
    public function setPasskey($passkey)
    {
        $this->passkey = $passkey;

        return $this;
    }

    /**
     * Get passkey
     *
     * @return string 
     */
    public function getPasskey()
    {
        return $this->passkey;
    }

    
        /**
     * Constructor
     */
    public function __construct()
    {
        $this->active = false;
        $this->article = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }
    
    public function getSalt()
    {
        // you *may* need a real salt depending on your encoder
        // see section on salt below
        return '$2a$12$uWepESKverBsrLAuOPY';
    }
    public function getPassword()
    {
        return $this->passkey;
    }
    
    public function getRoles()
    {
        if($this->userGroup == 1) {
            return array('ROLE_ADMIN');
        } 
        elseif($this->userGroup == 2) {
            return array('ROLE_USER');
        }
        elseif($this->userGroup == 3) {
            return array('ROLE_MODERATOR');
        }
        elseif($this->userGroup == 4) {
            return array('ROLE_BCUSTOMER');
        }
        elseif($this->userGroup == 5) {
            return array('ROLE_OCIUSER');
        }
    }
    public function eraseCredentials()
    {
    }  
    
    /** @see \Serializable::serialize() */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->email,
            $this->passkey,
            // see section on salt below
            // $this->salt,
        ));
    }
    /** @see \Serializable::unserialize() */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->email,
            $this->passkey,
            // see section on salt below
            // $this->salt
        ) = unserialize($serialized);
    }
    
    public function isAccountNonExpired()
    {
        return true;
    }

    public function isAccountNonLocked()
    {
        return true;
    }

    public function isCredentialsNonExpired()
    {
        return true;
    }

    public function isEnabled()
    {
        return $this->active;
    }
    
    
    /**
     * @var \Orth\IndexBundle\Entity\Customers
     */
    private $customer;


    /**
     * Set customer
     *
     * @param \Orth\IndexBundle\Entity\Customers $customer
     * @return Users
     */
    public function setCustomer(\Orth\IndexBundle\Entity\Customers $customer = null)
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Get customer
     *
     * @return \Orth\IndexBundle\Entity\Customers 
     */
    public function getCustomer()
    {
        return $this->customer;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $token;


    /**
     * Add token
     *
     * @param \Orth\IndexBundle\Entity\Tokens $token
     * @return Users
     */
    public function addToken(\Orth\IndexBundle\Entity\Tokens $token)
    {
        $this->token[] = $token;

        return $this;
    }

    /**
     * Remove token
     *
     * @param \Orth\IndexBundle\Entity\Tokens $token
     */
    public function removeToken(\Orth\IndexBundle\Entity\Tokens $token)
    {
        $this->token->removeElement($token);
    }

    /**
     * Get token
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Set active
     *
     * @param integer $active
     * @return Users
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return integer 
     */
    public function getActive()
    {
        return $this->active;
    }
    
        /**
     * @Assert\Length(
     *     min = 6,
     *     minMessage = "Das Passwort muss mindestens 6 Zeichen haben"
     * )
     */
     public $newPassword;
     
     /**
     * Get newPassword
     *
     * @return integer 
     */
    public function getNewPassword()
    {
        return $this->newPassword;
    }
    
    /**
     * Set permPrice
     *
     * @param integer $permPrice
     * @return Users
     */
    public function setPermPrice($permPrice)
    {
        $this->permPrice = $permPrice;

        return $this;
    }

    /**
     * Get permPrice
     *
     * @return integer 
     */
    public function getPermPrice()
    {
        return $this->permPrice;
    }
    
    /**
     * Set permOrder
     *
     * @param integer $permOrder
     * @return Users
     */
    public function setPermOrder($permOrder)
    {
        $this->permOrder = $permOrder;

        return $this;
    }

    /**
     * Get permOrder
     *
     * @return integer 
     */
    public function getPermOrder()
    {
        return $this->permOrder;
    }
   
    /**
     * Set permOpenshop
     *
     * @param integer $permOpenshop
     * @return Users
     */
    public function setPermOpenshop($permOpenshop)
    {
        $this->permOpenshop = $permOpenshop;

        return $this;
    }

    /**
     * Get permOpenshop
     *
     * @return integer 
     */
    public function getPermOpenshop()
    {
        return $this->permOpenshop;
    }
    
    /**
     * Set permPriceopenshop
     *
     * @param integer $permPriceopenshop
     * @return Users
     */
    public function setPermPriceopenshop($permPriceopenshop)
    {
        $this->permPriceopenshop = $permPriceopenshop;

        return $this;
    }

    /**
     * Get permPriceopenshop
     *
     * @return integer 
     */
    public function getPermPriceopenshop()
    {
        return $this->permPriceopenshop;
    }
}
